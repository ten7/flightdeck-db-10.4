---
- hosts: mysql
  tasks:
    - name: Create a temp directory
      tempfile:
        state: directory
        prefix: "docker-cmd-"
      register: _cmd_temp_dir
      notify:
        - delete temp items

    - name: Download DB dumps from S3
      aws_s3:
        bucket: "{{ item.clone.bucket }}"
        object: "{{ item.clone.path }}"
        dest: "{{ _cmd_temp_dir.path }}/{{ item.name }}.sqldump"
        mode: get
        s3_url: "{{ item.clone.endpoint | default(omit) }}"
        region: "{{ item.clone.region | default(omit) }}"
        aws_access_key: "\
          {% if item.accessKeyFile is defined %}\
          {{ lookup('file', item.clone.accessKeyFile) }}\
          {% else %}\
          {{ item.clone.accessKey | default(omit) }}\
          {% endif %}"
        aws_secret_key: "\
          {% if item.secretKeyFile is defined %}\
          {{ lookup('file', item.clone.secretKeyFile) }}\
          {% else %}\
          {{ item.clone.secretKey | default(omit) }}\
          {% endif %}"
      loop: "{{ mysql_databases | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
      when:
        - item.clone is defined
        - (item.clone.method | default('none')) == 's3'

    - name: Import DB dumps
      shell: >
        {% if _compression == 'gz' %}
        zcat {{ _archive }} | mysql -C {{ item.name }}
        {% elif _compression  == 'lz' %}
        lzcat {{ _archive }} | mysql -C {{ item.name }}
        {% elif _compression  == 'lzop' %}
        lzopcat {{ _archive }} | mysql -C {{ item.name }}
        {% else %}
        mysql -C {{ item.name }} < {{ _archive }}
        {% endif %}
      args:
        chdir: "{{ _cmd_temp_dir.path }}"
      loop: "{{ mysql_databases | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      vars:
        _compression: "{{ item.clone.compression | default('none') }}"
        _archive: "{{ _cmd_temp_dir.path }}/{{ item.name }}.sqldump"
      no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
      when:
        - item.clone is defined

  handlers:
    - name: delete temp items
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ _cmd_temp_dir.path }}"
